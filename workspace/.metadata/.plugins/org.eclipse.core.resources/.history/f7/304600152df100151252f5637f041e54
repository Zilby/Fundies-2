public class Dequeue<T> {
    Sentinel<T> header;
    
    Dequeue() {
        this.header = new Sentinel<T>();
    }
    
    Dequeue(Sentinel<T> header) {
        this.header = header;
    }
}

abstract class ANode<T> {
    ANode<T> next;
    ANode<T> prev;
}

class Sentinel<T> extends ANode<T> {
    
    Sentinel() {
        this.next = this;
        this.prev = this;
    }
}

class Node<T> extends ANode<T> {
    T data;
    
    Node(T data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
    
    Node(T data, Node<T> next, Node<T> prev) {
        if ((next == null) || (prev == null)) { 
            throw new IllegalArgumentException("Cannot accept null node");
        }
        this.data = data; 
        this.next = next;
        this.prev = prev;
        prev.next = this;
        next.prev = this;
    }
}
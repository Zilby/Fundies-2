import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;
import java.util.*;



// a list of objects
interface IList<T> extends Iterable<T> {
    int len();
    
    boolean isCons();
    
    Cons<T> asCons();
}

// an empty list of objects
class Empty<T> implements IList<T> {
    public int len() {
        return 0;
    }
    
    public boolean isCons() {
        return false;
    }
    
    public Cons<T> asCons() {
        throw new UnsupportedOperationException("Don't do this!");
    }
    
    public Iterator<T> iterator() {
        return new IListIterator<T>(this);
      }
}

// a list with items in it
class Cons<T> implements IList<T> {
    T first;
    IList<T> rest;
    
    Cons(T first, IList<T> rest) {
        this.first = first;
        this.rest = rest;
    }
    
    public int len() {
        return 1 + this.rest.len();
    }
    
    public boolean isCons() {
        return true;
    }
    
    public Cons<T> asCons() {
        return this;
    }
    
    public Iterator<T> iterator() {
        return new IListIterator<T>(this);
      }
}

class IListIterator<T> implements Iterator<T> {
    IList<T> items;
    IListIterator(IList<T> items) {
        this.items = items;
    }
    
    public boolean hasNext() {
        return this.items.isCons();
    }
    
    public T next() {
        Cons<T> itemsAsCons = this.items.asCons();
        T answer = itemsAsCons.first;
        this.items = itemsAsCons.rest;
        return answer;
    }
    
    public void remove() {
        throw new UnsupportedOperationException("Don't do this!");
    }
}

// represents a cell in the game scene
class Cell {
    Vertex vertex;
    boolean edgeTop;
    boolean edgeLeft;
    boolean edgeBot;
    boolean edgeRight;
    
    Cell (Vertex vertex, boolean edgeTop, boolean edgeLeft, boolean edgeBot, boolean edgeRight) {
        this.vertex = vertex;
        this.edgeTop = edgeTop;
        this.edgeLeft = edgeLeft;
        this.edgeBot = edgeBot;
        this.edgeRight = edgeRight;
    }
}

// a vertex in a graph
class Vertex {
    int x;
    int y;
    IList<Edge> outEdges;
    
    Vertex(int x, int y, IList<Edge> outEdges) {
        this.x = x;
        this.y = y;
        this.outEdges = outEdges;
    }
    
    int toIdentifier() {
        return 100 * y + x;
    }
}

// an edge in a graph
class Edge {
    Vertex from;
    Vertex to;
    int weight;
    
    Edge(Vertex from, Vertex to, int weight){
        this.from = from;
        this.to = to;
        this.weight = weight;
    }
}

/// a spanning tree 
class SpanningTree {
    IList<Edge> tree;
    
    SpanningTree(IList<Edge> tree) {
        this.tree = tree;
    }
}

class MazeGameWorld {
    // width of the world in cells
    static final int MAZE_SIZE_WIDTH = 20;
    // height of the world in cells
    static final int MAZE_SIZE_HEIGHT = 15;
    
    void generateInitVertex() {
        ArrayList<ArrayList<Vertex>> vertices = new ArrayList<ArrayList<Vertex>>(); 
        for (int x = 0; x < MAZE_SIZE_WIDTH; x++) {
            ArrayList<Vertex> temp = new ArrayList<Vertex>();
            for (int y = 0; y < MAZE_SIZE_WIDTH; y++) {
                temp.add(new Vertex(x, y, new Empty()));
            }
            vertices.add(temp);
        }
    }
    
    IList<Edge> generateEdges(ArrayList<ArrayList<Vertex>> l) {
        Vertex tl = l.get(0).get(0);
        
        Edge tlr = new Edge(tl, l.get(1).get(0), (int)Math.random() * 1000);
        Edge tlb = new Edge(tl, l.get(0).get(1), (int)Math.random() * 1000);
        
        Vertex bl = l.get(0).get(MAZE_SIZE_HEIGHT - 1);
        
        Edge blr = new Edge(bl, l.get(1).get(MAZE_SIZE_HEIGHT - 1), (int)Math.random() * 1000);
        Edge blt = new Edge(bl, l.get(0).get(MAZE_SIZE_HEIGHT - 2), (int)Math.random() * 1000);
        
        Vertex tr = l.get(MAZE_SIZE_WIDTH - 1).get(0);
        
        Edge trl = new Edge(tr, l.get(MAZE_SIZE_WIDTH - 2).get(0), (int)Math.random() * 1000);
        Edge trb = new Edge(tr, l.get(MAZE_SIZE_WIDTH - 1).get(1), (int)Math.random() * 1000);
        
        Vertex br = l.get(MAZE_SIZE_WIDTH - 1).get(MAZE_SIZE_HEIGHT - 1);
        
        Edge brl = new Edge(br, 
                l.get(MAZE_SIZE_WIDTH - 2).get(MAZE_SIZE_HEIGHT - 1), 
                (int)Math.random() * 1000);
        Edge brt = new Edge (br, 
                l.get(MAZE_SIZE_WIDTH - 1).get(MAZE_SIZE_HEIGHT - 2), 
                (int)Math.random() * 1000);
        
        IList<Edge> allEdges = 
                new Cons<Edge>(tlr, 
                        new Cons<Edge>(tlb,
                                new Cons<Edge>(blr, 
                                        new Cons<Edge>(blt, 
                                                new Cons<Edge>(trl, 
                                                        new Cons<Edge>(trb, 
                                                                new Cons<Edge>(brl, 
                                                                        new Cons<Edge>(brt,
                                                                                new Empty<Edge>()
                                                                                ))))))));
                        
        
        for (ArrayList<Vertex> vList : l) {
            for (Vertex v : vList) {
                if (v.x == 0) {
                    // FILL THESE OUT LATER
                }
                
                else if (v.x == MAZE_SIZE_WIDTH - 1) {
                    
                }
                
                else if (v.y == 0) {
                    
                }
                
                else if (v.y == MAZE_SIZE_HEIGHT - 1) {
                    
                }
                
                else {
                     
                }
            }
        }
        
        return allEdges;
    }
    
    int find(HashMap<Integer, Integer> hashmap, int x) {
        if (hashmap.get(x) == x) {
            return x;
        }
        
        else {
            return find(hashmap, hashmap.get(x));
        }
    }
    
    SpanningTree KruskalVertice(IList<Edge> allEdgesSorted) {
        int totalCells = MAZE_SIZE_HEIGHT * MAZE_SIZE_WIDTH;
        IList<Edge> ST = new Empty<Edge>();
        HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();
        
        // ADD FUNCTION TO SORT ALLEDGES LATER
        
        for (int i = 0; i < 6000; i++) {
            hash.put(i, i);
        }
        
        while (ST.len() < totalCells - 1) {
            for (Edge e : allEdgesSorted) {
                if (find(hash, e.to.toIdentifier()) == find(hash, e.from.toIdentifier())) {
                    // do nothing
                }
                
                else {
                    ST = new Cons<Edge>(e, ST);
                    
                }
            }
        }
        return new SpanningTree(ST);
    }
}

class ExamplesMazeGame {
}

/*

//for iterating over our list
class ListIterator<T> implements Iterator<T> {
    IList<T> curr;

    ListIterator(IList<T> curr) {
        this.curr = curr;
    }

    // returns true if there's at least one value left in this iterator
    public boolean hasNext() {
        return curr.hasNext();
    }

    // returns the next value and advances the iterator
    public T next() {
        T temp = this.curr.getNext().getData();
        this.curr = this.curr.getNext();
        return temp;
    }

    // no need to implement this since it is never used
    public void remove() {
        throw new UnsupportedOperationException();
    }
}

// represents a list of objects
interface IList<T> extends Iterable<T> {
    // determines if list is empty
    boolean isEmpty();

    // for iterating over the list
    Iterator<T> iterator();

    // appends an element to the list
    IList<T> append(IList<T> l);

    // checks if list has another value left
    boolean hasNext();

    // gets data value at this point
    T getData();

    // gets the rest of the list
    IList<T> getNext();
}

// represents an empty list
class Empty<T> implements IList<T>, Iterable<T> {
    // determines if list is empty
    public boolean isEmpty() {
        return true;
    }

    // for iterating over the list
    public Iterator<T> iterator() {
        return new ListIterator<T>(this);
    }

    // appends an element to the list
    public IList<T> append(IList<T> l) {
        return l;
    }

    // checks if list has another value left
    public boolean hasNext() {
        return false;
    }

    // gets data value at this point
    public T getData() {
        return null;
    }

    // gets the rest of the list
    public IList<T> getNext() {
        throw new UnsupportedOperationException();
    }
}

// represents a list with an element of a list
class Cons<T> implements IList<T>, Iterable<T> {
    // The data of this node
    T first;
    // the rest of the list
    IList<T> rest;

    Cons(T first, IList<T> rest) {
        this.first = first;
        this.rest = rest;
    }

    // determines if list is empty
    public boolean isEmpty() {
        return false;
    }

    // for iterating over the list
    public Iterator<T> iterator() {
        return new ListIterator<T>(this);
    }

    // appends an element to the list
    public IList<T> append(IList<T> l) {
        if (rest.isEmpty()) {
            rest = l;
        } 
        else {
            rest.append(l);
        }
        return this;
    }

    // checks if list has another value left
    public boolean hasNext() {
        return !this.rest.isEmpty();
    }

    // gets data value at this point
    public T getData() {
        return this.first;
    }

    // gets the rest of the list
    public IList<T> getNext() {
        return this.rest;
    }
}

// Represents a single square of the game area
class Cell {
    // In logical coordinates, with the origin at the top-left corner of the
    // screen
    int x;
    int y;
    // the four adjacent cells to this one
    Cell left;
    Cell top;
    Cell right;
    Cell bottom;

    Cell(int x, int y) {
        this.x = x;
        this.y = y;
        this.left = null;
        this.right = null;
        this.top = null;
        this.bottom = null;
    }

    // sets the left cell to the given value
    void setLeft(Cell left) {
        this.left = left;
    }

    // sets the right cell to the given value
    void setRight(Cell right) {
        this.right = right;
    }

    // sets the top cell to the given value
    void setTop(Cell top) {
        this.top = top;
    }

    // sets the bottom cell to the given value
    void setBottom(Cell bottom) {
        this.bottom = bottom;
    }
}

class Edge {
    Cell a;
    Cell b;
    double weight;
    
    Edge(Cell a, Cell b) {
        this.a = a;
        this.b = b;
        weight = Math.sqrt(Math.pow((a.x - b.x), 2) + Math.pow((a.y - b.y), 2));
    }
}

// represents our world state
class Maze extends World {
    // Defines an int constant
    static final int WIDTH = 30;
    static final int HEIGHT = 20;
    // All the cells of the game
    IList<Cell> grid = new Empty<Cell>();
    IList<Edge> edges = new Empty<Edge>();
    // whether the game has ended
    boolean gameEnd;

    Maze() {
        this.gameEnd = false;
        initializeCells();
    }
    
    void initializeCells() {
        ArrayList<ArrayList<Cell>> cells = new ArrayList<ArrayList<Cell>>();
        for (int i = 0; i <= Maze.WIDTH; i++) {
            ArrayList<Cell> temp = new ArrayList<Cell>();
            for (int j = 0; j <= Maze.HEIGHT; j++) {
                temp.add(new Cell(i, j));
            }
            cells.add(temp);
        }
        cells = connectCells(cells);
        for (ArrayList<Cell> a : cells) {
            for (Cell c : a) {
                grid = grid.append(new Cons<Cell>(c, new Empty<Cell>()));
            }
        }
    }
    
    void initializeEdges() {
    // HashMap<String, String> representatives;
    // IList<Edge> edgesInTree;
    // IList<Edge> worklist = all edges in graph, sorted by edge weights;
     
    // initialize every node's representative to itself
    // While(there's more than one tree)
    //   Pick the next cheapest edge of the graph: suppose it connects X and Y.
    //   If find(representatives, X) equals find(representatives, Y):
    //     discard this edge  // they're already connected
    //   Else:
    //     Record this edge in edgesInTree
    //     union(representatives,
    //           find(representatives, X),
    //           find(representatives, Y))
    // Return the edgesInTree
    }
    
 // connects the cells of a given array together (ie: assigns values to
    // left, right, top and bottom)
    ArrayList<ArrayList<Cell>> connectCells(ArrayList<ArrayList<Cell>> l) {
        int row = 0;
        int column = 0;
        for (ArrayList<Cell> a : l) {
            for (Cell c : a) {
                if (row - 1 < 0) {
                    c.setLeft(c);
                } 
                else {
                    c.setLeft(l.get(row - 1).get(column));
                }
                if (row + 1 > Maze.WIDTH) {
                    c.setRight(c);
                } 
                else {
                    c.setRight(l.get(row + 1).get(column));
                }
                if (column - 1 < 0) {
                    c.setTop(c);
                } 
                else {
                    c.setTop(l.get(row).get(column - 1));
                }
                if (column + 1 > Maze.HEIGHT) {
                    c.setBottom(c);
                } 
                else {
                    c.setBottom(l.get(row).get(column + 1));
                }
                column++;
            }
            column = 0;
            row++;
        }
        return l;
    }

    // draws the world scene
    public WorldScene makeScene() {
        WorldScene w = new WorldScene(Maze.WIDTH, Maze.HEIGHT);
        return w;
    }

    public void onTick() {
    }

    public void onKeyEvent(String ke) {
    }

}
*/
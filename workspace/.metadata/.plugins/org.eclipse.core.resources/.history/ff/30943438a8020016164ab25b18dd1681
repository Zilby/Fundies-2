import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;
import java.util.*;

//represents a list of objects
interface IList<T> extends Iterable<T> {
    // determines if list is empty
    boolean isEmpty();

    // for iterating over the list
    Iterator<T> iterator();

    // appends an element to the list
    IList<T> append(IList<T> l);

    // checks if list has another value left
    boolean hasNext();

    // gets data value at this point
    T getData();

    // gets the rest of the list
    IList<T> getNext();
}

// represents an empty list
class Empty<T> implements IList<T>, Iterable<T> {
    // determines if list is empty
    public boolean isEmpty() {
        return true;
    }

    // for iterating over the list
    public Iterator<T> iterator() {
        return new ListIterator<T>(this);
    }

    // appends an element to the list
    public IList<T> append(IList<T> l) {
        return l;
    }

    // checks if list has another value left
    public boolean hasNext() {
        return false;
    }

    // gets data value at this point
    public T getData() {
        return null;
    }

    // gets the rest of the list
    public IList<T> getNext() {
        throw new UnsupportedOperationException();
    }
}

// represents a list with an element of a list
class Cons<T> implements IList<T>, Iterable<T> {
    // The data of this node
    T first;
    // the rest of the list
    IList<T> rest;

    Cons(T first, IList<T> rest) {
        this.first = first;
        this.rest = rest;
    }

    // determines if list is empty
    public boolean isEmpty() {
        return false;
    }

    // for iterating over the list
    public Iterator<T> iterator() {
        return new ListIterator<T>(this);
    }

    // appends an element to the list
    public IList<T> append(IList<T> l) {
        if (rest.isEmpty()) {
            rest = l;
        } else {
            rest.append(l);
        }
        return this;
    }

    // checks if list has another value left
    public boolean hasNext() {
        return !this.rest.isEmpty();
    }

    // gets data value at this point
    public T getData() {
        return this.first;
    }

    // gets the rest of the list
    public IList<T> getNext() {
        return this.rest;
    }
}

// for iterating over our list
class ListIterator<T> implements Iterator<T> {
    IList<T> curr;

    ListIterator(IList<T> curr) {
        this.curr = curr;
    }

    // returns true if there's at least one value left in this iterator
    public boolean hasNext() {
        return curr.hasNext();
    }

    // returns the next value and advances the iterator
    public T next() {
        T temp = this.curr.getNext().getData();
        this.curr = this.curr.getNext();
        return temp;
    }

    // no need to implement this since it is never used
    public void remove() {
        throw new UnsupportedOperationException();
    }
}

// represents a cell in the game scene
class Cell {
    Vertex vertex;
    boolean edgeTop;
    boolean edgeLeft;
    boolean edgeBot;
    boolean edgeRight;

    Cell(Vertex vertex, boolean edgeTop, boolean edgeLeft, boolean edgeBot, boolean edgeRight) {
        this.vertex = vertex;
        this.edgeTop = edgeTop;
        this.edgeLeft = edgeLeft;
        this.edgeBot = edgeBot;
        this.edgeRight = edgeRight;
    }
}

// a vertex in a graph
class Vertex {
    int x;
    int y;
    IList<Edge> outEdges;

    Vertex(int x, int y, IList<Edge> outEdges) {
        this.x = x;
        this.y = y;
        this.outEdges = outEdges;
    }

    int toIdentifier() {
        return 1000 * y + x;
    }
}

// an edge in a graph
class Edge {
    Vertex from;
    Vertex to;
    int weight;

    Edge(Vertex from, Vertex to, int weight) {
        this.from = from;
        this.to = to;
        this.weight = weight;
    }
}

class MazeGameWorld extends World {
    // width of the world in cells
    static final int WIDTH = 20;
    // height of the world in cells
    static final int HEIGHT = 15;

    void generateInitVertex() {
        ArrayList<ArrayList<Vertex>> vertices = new ArrayList<ArrayList<Vertex>>();
        for (int x = 0; x < WIDTH; x++) {
            ArrayList<Vertex> temp = new ArrayList<Vertex>();
            for (int y = 0; y < HEIGHT; y++) {
                temp.add(new Vertex(x, y, new Empty<Edge>()));
            }
            vertices.add(temp);
        }
    }

    IList<Edge> generateEdges(ArrayList<ArrayList<Vertex>> l) {
        Vertex tl = l.get(0).get(0);

        Edge tlr = new Edge(tl, l.get(1).get(0), (int) Math.random() * 1000);
        Edge tlb = new Edge(tl, l.get(0).get(1), (int) Math.random() * 1000);

        Vertex bl = l.get(0).get(HEIGHT - 1);

        Edge blr = new Edge(bl, l.get(1).get(HEIGHT - 1), (int) Math.random() * 1000);
        Edge blt = new Edge(bl, l.get(0).get(HEIGHT - 2), (int) Math.random() * 1000);

        Vertex tr = l.get(WIDTH - 1).get(0);

        Edge trl = new Edge(tr, l.get(WIDTH - 2).get(0), (int) Math.random() * 1000);
        Edge trb = new Edge(tr, l.get(WIDTH - 1).get(1), (int) Math.random() * 1000);

        Vertex br = l.get(WIDTH - 1).get(HEIGHT - 1);

        Edge brl = new Edge(br, l.get(WIDTH - 2).get(HEIGHT - 1), (int) Math.random() * 1000);
        Edge brt = new Edge(br, l.get(WIDTH - 1).get(HEIGHT - 2), (int) Math.random() * 1000);

        IList<Edge> allEdges = new Cons<Edge>(tlr,
                new Cons<Edge>(tlb, new Cons<Edge>(blr, new Cons<Edge>(blt, new Cons<Edge>(trl,
                        new Cons<Edge>(trb, new Cons<Edge>(brl, new Cons<Edge>(brt, new Empty<Edge>()))))))));

        for (ArrayList<Vertex> vList : l) {
            for (Vertex v : vList) {
                if (v.x == 0) {
                    // FILL THESE OUT LATER
                }

                else if (v.x == WIDTH - 1) {

                }

                else if (v.y == 0) {

                }

                else if (v.y == HEIGHT - 1) {

                }

                else {

                }
            }
        }

        return allEdges;
    }

    int find(HashMap<Integer, Integer> hashmap, int x) {
        if (hashmap.get(x) == x) {
            return x;
        }

        else {
            return find(hashmap, hashmap.get(x));
        }
    }

    IList<Edge> KruskalVertice(IList<Edge> allEdgesSorted) {
        int totalCells = HEIGHT * WIDTH;
        IList<Edge> ST = new Empty<Edge>();
        HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();

        // ADD FUNCTION TO SORT ALLEDGES LATER

        for (int i = 0; i < 6000; i++) {
            hash.put(i, i);
        }

        while (ST.len() < totalCells - 1) {
            for (Edge e : allEdgesSorted) {
                if (find(hash, e.to.toIdentifier()) == find(hash, e.from.toIdentifier())) {
                    // do nothing
                }

                else {
                    ST = new Cons<Edge>(e, ST);

                }
            }
        }
        return new SpanningTree(ST);
    }

    // draws the world scene
    public WorldScene makeScene() {
        WorldScene w = new WorldScene(WIDTH, HEIGHT);
        return w;
    }

    public void onTick() {
    }

    public void onKeyEvent(String ke) {
    }
}

class ExamplesMazeGame {
}
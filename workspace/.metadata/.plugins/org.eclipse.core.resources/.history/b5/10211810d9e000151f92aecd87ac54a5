import tester.*;

public abstract class ABST<T> {
    IComparator<T> order;
    
    ABST(IComparator<T> order) {
        this.order = order;
    }
    
    ABST<T> insert(T t) {
        return new Node<T>(order, t);
    }
    
    ABST<T> getLeftmost() {
        throw new RuntimeException("No leftmost item of an empty tree");
    }
    
    ABST<T> getRight() {
        throw new RuntimeException("No right of an empty tree");
    }
    
    boolean sameTree(ABST<T> a) {
        return a.empty();
    }
    
    boolean sameTreeHelp(Node<T> n) {
        return false;
    }
    
    boolean empty() {
        return true;
    }
}

interface IComparator<T> {
    int compare(T t1, T t2);
}

class Leaf<T> extends ABST<T> {
    Leaf(IComparator<T> order) {    
        super(order);
    }
}

class Node<T> extends ABST<T> {
    T data;
    ABST left;
    ABST right;
    
    Node(IComparator<T> order, T data) {
        super(order);
        this.data = data;
        this.left = new Leaf<T>(order);
        this.right = new Leaf<T>(order);
    }
    
    Node(IComparator<T> order, T data, ABST left, ABST right) {
        super(order);
        this.data = data;
        this.left = left;
        this.right = right;
    }
    
    ABST<T> insert(T t) {
        if(this.order.compare(t, this.data) > 0) {
            this.left = this.left.insert(t);  
        }
        else {
            this.right = this.right.insert(t);
        }
        return this;
    }
    
    ABST<T> getLeftmost() {
        if(this.left.empty()) {
            if(this.right.empty()) {
                return this;
            }
            else {
                return this.right.getLeftmost();
            }
        }
        else {
            return this.left.getLeftmost();
        }
    }
    
    ABST<T> getRight() {
        if(this.left.empty()) {
            if(this.right.empty()) {
                return new Leaf<T>(order);
            }
            else {
                return this.right;
            }
        }
        else {
            this.left = this.left.getRight();
            return this;
        }
    }
    
    boolean sameTree(ABST<T> a) {
        if(a.empty()){
            return false;
        }
        else {
            return a.sameTreeHelp(this);
        }
    }
    
    boolean sameTreeHelp(Node<T> n) {
        if(n.order.compare(this.data, n.data) == 0) {
            return n.left.sameTree(this.left) && n.right.sameTree(this.right);
        }
        else {
            return false;
        }
    }
    
    boolean empty() {
        return false;
    }
}

class Book {
    String title;
    String author;
    int price;
}

class BooksByTitle implements IComparator<Book> {
    public int compare(Book t1, Book t2) { 
        return t1.title.compareTo(t2.title);
    }
}

class BooksByAuthor implements IComparator<Book> {
    public int compare(Book t1, Book t2) { 
        return t1.author.compareTo(t2.author);
    }
}

class BooksByPrice implements IComparator<Book> {
    public int compare(Book t1, Book t2) {
        if(t1.price > t2.price) {
            return 1;
        }
        else if(t1.price < t2.price) {
            return -1;
        }
        else {
            return 0;
        }
    }
}

class Examples {
    void test(Tester t){
        
    }   
}
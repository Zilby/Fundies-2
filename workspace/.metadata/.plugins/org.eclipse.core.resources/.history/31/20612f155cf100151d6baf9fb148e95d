import java.util.*;

/**
 * A class that defines a new permutation code, as well as methods for encoding
 * and decoding of the messages that use this code.
 */
public class PermutationCode {
    /** The original list of characters to be encoded */
    ArrayList<Character> alphabet = 
        new ArrayList<Character>(Arrays.asList(
                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
                    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 
                    't', 'u', 'v', 'w', 'x', 'y', 'z'));

    ArrayList<Character> code = new ArrayList<Character>(26);

    /** A random number generator */
    Random rand = new Random();

    /**
     * Create a new instance of the encoder/decoder with a new permutation code 
     */
    PermutationCode() {
        this.code = this.initEncoder();
    }

    /**
     * Create a new instance of the encoder/decoder with the given code 
     */
    PermutationCode(ArrayList<Character> code) {
        this.code = code;
    }

    /** Initialize the encoding permutation of the characters */
    ArrayList<Character> initEncoder() {
        ArrayList<Character> result = new ArrayList<Character>();
        ArrayList<Character> temp = new ArrayList<Character>();
        for (Character c : this.alphabet) {
            temp.add(c);
        }
        while (temp.size()>0) {
            result.add(temp.get(this.rand.nextInt(temp.size())));
        }
        return result;
    }

    /**
     * produce an encoded <code>String</code> from the given <code>String</code>
     * @param source the <code>String</code> to encode
     * @return the secretly encoded <String>
     */
    String encode(String source) {
        int i = source.length()-1;
        String result = "";
        while(i>-1) {
            result = this.code.get(this.alphabet.indexOf(source.charAt(i))) + result;
        }
        return result;
    }

    /**
     * produce an decoded <code>String</code> from the given <code>String</code>
     * @param source the <code>String</code> to decode
     * @return the revealed <String>
     */
    String decode(String code) {
        int i = code.length()-1;
        String result = "";
        while(i>-1) {
            result = this.alphabet.get(this.code.indexOf(code.charAt(i))) + result;
        }
        return result;
    }
}